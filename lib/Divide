import static utils.Utilities.writeFile;

import org.objectweb.asm.*;
import org.objectweb.asm.Opcodes;
/**
 * Performs division with integers, double, long, or float
 * 
 * @author Isaiah Parker
 *
 */
public class Divide{

    public static void main(String[] args){

        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC,"DivideNumbers", null, "java/lang/Object",null);
        
        {
			MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
			mv.visitCode();
			mv.visitVarInsn(Opcodes.ALOAD, 0); //load the first local variable: this
			mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V",false);
			mv.visitInsn(Opcodes.RETURN);
			mv.visitMaxs(1,1);
			mv.visitEnd();
		}

        {
            MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC+Opcodes.ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
            mv.visitCode();
            
            //Integer Divide
            mv.visitIntInsn(Opcodes.BIPUSH, 10);//Declare the integer 10
            mv.visitVarInsn(Opcodes.ISTORE, 1);//Store 10 in memory location 1
            mv.visitInsn(Opcodes.ICONST_5);//Declare the integer 5
            mv.visitVarInsn(Opcodes.ISTORE, 2);//Store 2 in memory location 2
            mv.visitVarInsn(Opcodes.ILOAD, 1);//Pulling integer 10
            mv.visitVarInsn(Opcodes.ILOAD, 2);//Pulling integer 5
            mv.visitInsn(Opcodes.IDIV);//Divide 10 by 5
            mv.visitVarInsn(Opcodes.ISTORE, 3);//Store answer in memory location 3
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(Opcodes.ILOAD, 3);
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(F)V", false); // Print the result
            
            //Double Division
            mv.visitLdcInsn(new Double("20.5"));//Declare the double 20.5
            mv.visitVarInsn(Opcodes.DSTORE, 4);//Store 20.5 in memory location 4
            mv.visitLdcInsn(new Double("10.25"));//Declare the double 10.25
            mv.visitVarInsn(Opcodes.DSTORE, 6);//storing 10.25 in memory location 6
            mv.visitVarInsn(Opcodes.DLOAD, 4);//Pulling item at memory location 4. Number 20.5
            mv.visitVarInsn(Opcodes.DLOAD, 6);//Pulling item at memory location 6. Number 10.25
            mv.visitInsn(Opcodes.DDIV);//Divide 20.5 by 10.25
            mv.visitVarInsn(Opcodes.DSTORE, 8);//Store answer at memory location 8
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(Opcodes.DLOAD, 8);
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(F)V", false); // Print the result
            //Long Division
            mv.visitLdcInsn(new Long(12L));//Declare the long number 12
            mv.visitVarInsn(Opcodes.LSTORE, 10);//Store long 12 in memory location 10
            mv.visitLdcInsn(new Long(5L));//Declare the long number 5
            mv.visitVarInsn(Opcodes.LSTORE, 12);//Store long 5 in memory location 12
            mv.visitVarInsn(Opcodes.LLOAD, 10);//Pulling memory location 10. Number 12
            mv.visitVarInsn(Opcodes.LLOAD, 12);//Loading item at memory location 12. Number 5.
            mv.visitInsn(Opcodes.LDIV);//Divide item at memory location 10 by item at memory location 12. Divide 12/5
            mv.visitVarInsn(Opcodes.LSTORE, 14);//Store answer in memory location 14.
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(Opcodes.LLOAD, 14);
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(F)V", false); // Print the result
            //Float Division
            mv.visitLdcInsn(10.5f); // Declare the first float number 10.5
            mv.visitVarInsn(Opcodes.FSTORE, 15);//Store the number 
            mv.visitLdcInsn(2.5f); // Declare the second float number 2.5
            mv.visitVarInsn(Opcodes.FSTORE, 16);//Store the number
            mv.visitVarInsn(Opcodes.FLOAD, 15);//Load the first number
            mv.visitVarInsn(Opcodes.FLOAD, 16);//Load the second number
            mv.visitInsn(Opcodes.FDIV); // Divide the first float number with the second float number
            mv.visitVarInsn(Opcodes.FSTORE, 17);// Store the result in memory position 3
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitVarInsn(Opcodes.FLOAD, 17);
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(F)V", false); // Print the result

            
            mv.visitInsn(Opcodes.RETURN);
            mv.visitMaxs(4, 16);
            mv.visitEnd();

        }

        cw.visitEnd();

        byte[] b = cw.toByteArray();

        writeFile(b,"DivideNumbers.class");
        
        System.out.println("Finished");
    }//end main
}//end class