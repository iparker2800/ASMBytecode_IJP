import static utils.Utilities.writeFile;

import org.objectweb.asm.*;
import org.objectweb.asm.Opcodes;
/**
 * Compares two integer, long, or string values to determine which of them is greater.
 * 
 * @author Isaiah Parker
 *
 */
public class Compare{

    public static void main(String[] args){

        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC,"CompareText", null, "java/lang/Object",null);
        
        {
			MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC, "<init>", "()V", null, null);
			mv.visitCode();
			mv.visitVarInsn(Opcodes.ALOAD, 0); //load the first local variable: this
			mv.visitMethodInsn(Opcodes.INVOKESPECIAL, "java/lang/Object", "<init>", "()V",false);
			mv.visitInsn(Opcodes.RETURN);
			mv.visitMaxs(1,1);
			mv.visitEnd();
		}

        {
            MethodVisitor mv=cw.visitMethod(Opcodes.ACC_PUBLIC+Opcodes.ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);
            mv.visitCode();
            
            //Comparing int
            mv.visitVarInsn(Opcodes.BIPUSH, 7);//pushes int value 7
            mv.visitVarInsn(Opcodes.ISTORE, 1);//stores int in location 1
            mv.visitIntInsn(Opcodes.BIPUSH, 6);//pushes int value 6
            mv.visitVarInsn(Opcodes.ISTORE, 2);//stores int in location 2 
            mv.visitVarInsn(Opcodes.ILOAD, 1); //loads variable in location 1
            mv.visitVarInsn(Opcodes.ILOAD, 2); //loads variable in location 2
            mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Math", "max", "(II)I", false);//invokes a class static method, Math.max()
            mv.visitVarInsn(Opcodes.ISTORE, 3);//stores int value from Math.max() in location 3
            
            //Comparing long
            mv.visitLdcInsn(new Long(14L)); 
            mv.visitVarInsn(Opcodes.LSTORE, 4);
            mv.visitLdcInsn(new Long(12L));
            mv.visitVarInsn(Opcodes.LSTORE, 6);
            mv.visitVarInsn(Opcodes.LLOAD, 4);
            mv.visitVarInsn(Opcodes.LLOAD, 6);
            mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Math", "max", "(II)I", false);
            mv.visitVarInsn(Opcodes.LSTORE, 8);
            
            //Comparing string
            mv.visitLdcInsn("123");// Load the first string onto the stack
            mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Integer", "parseInt", "(Ljava/lang/String;)I", false);// Convert the string to integer
            mv.visitVarInsn(Opcodes.ISTORE, 1);// Store the first integer into local variable 1
            mv.visitLdcInsn("456"); // Load the second string onto the stack
            mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/Integer", "parseInt", "(Ljava/lang/String;)I", false);// Convert the string to integer
            mv.visitVarInsn(Opcodes.ISTORE, 2);// Store the second integer into local variable 2
    
            Label label1 = new Label();// Compare the two integers
            mv.visitVarInsn(Opcodes.ILOAD, 1);
            mv.visitVarInsn(Opcodes.ILOAD, 2);
            mv.visitJumpInsn(Opcodes.IF_ICMPLT, label1);
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitLdcInsn("123");
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            Label label2 = new Label();
            mv.visitJumpInsn(Opcodes.GOTO, label2);
            mv.visitLabel(label1);
            mv.visitFieldInsn(Opcodes.GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
            mv.visitLdcInsn("456");
            mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
            mv.visitLabel(label2);
    
            mv.visitInsn(Opcodes.RETURN);
            mv.visitMaxs(0, 0);
            mv.visitEnd();
        }

        cw.visitEnd();

        byte[] b = cw.toByteArray();

        writeFile(b,"CompareText.class");
        
        System.out.println("Finished");
    }//end main
}//end class